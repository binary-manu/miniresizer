function(quiet_message)
    if (NOT FFMPEG_FIND_QUIETLY)
        message(${ARGV})
    endif()
endfunction()

function(required_message)
    if (FFMPEG_FIND_REQUIRED OR COMPONENT_REQUIRED)
        message(${ARGV})
    else()
        quiet_message(${ARGV})
    endif()
endfunction()

function(required_error)
    if (FFMPEG_FIND_REQUIRED OR COMPONENT_REQUIRED)
        message(FATAL_ERROR "${ARGV}")
    else()
        quiet_message(STATUS "${ARGV}")
    endif()
endfunction()

quiet_message(STATUS "Looking for FFMPEG")
set(FFMPEG_FOUND TRUE)

function(consume_component comp)
    list(FIND FFMPEG_FIND_COMPONENTS ${comp} want_comp)
    set(COMPONENT_REQUIRED ${FFMPEG_FIND_REQUIRED_${comp}})
    if(${want_comp} GREATER_EQUAL 0)
        quiet_message(STATUS "Looking for component ${comp}")

        quiet_message(STATUS "Looking for ${comp} library")
        find_library(${comp}_LIB NAMES ${comp} PATHS ENV FFMPEG_LIBRARY_PATH)
        if (${comp}_LIB)
            quiet_message(STATUS "Looking for ${comp} library - found (${${comp}_LIB})")
        else()
            required_message(STATUS "Looking for ${comp} library - not found")
        endif()

        quiet_message(STATUS "Looking for ${comp} header")
        find_path(${comp}_H NAMES ${comp}.h PATHS ENV FFMPEG_HEADER_PATH PATH_SUFFIXES lib${comp})
        if (${comp}_H)
            quiet_message(STATUS "Looking for ${comp} header - found (${${comp}_H}/${comp}.h)")
        else()
            required_message(STATUS "Looking for ${comp} header - not found")
        endif()

        if (${comp}_LIB AND ${comp}_H)
            add_library(FFMPEG_${comp} INTERFACE)
            target_link_libraries(FFMPEG_${comp} INTERFACE ${${comp}_LIB})
            get_filename_component(${comp}_H ${${comp}_H} DIRECTORY CACHE)
            target_include_directories(FFMPEG_${comp} INTERFACE ${${comp}_H})
            quiet_message(STATUS "Looking for component ${comp} - found")
            list(REMOVE_AT FFMPEG_FIND_COMPONENTS ${want_comp})
            set(FFMPEG_FIND_COMPONENTS ${FFMPEG_FIND_COMPONENTS} PARENT_SCOPE)
        else()
            set(FFMPEG_FOUND FALSE)
            required_error("Looking for component ${comp} - not found")
        endif()
    endif()
endfunction()

foreach(comp avcodec avformat avutil swscale)
    consume_component(${comp})
endforeach()

list(LENGTH FFMPEG_FIND_COMPONENTS remaining_components)
if(${remaining_components} GREATER 0)
    message(FATAL_ERROR "Components [${FFMPEG_FIND_COMPONENTS}] are unknown to the FFMPEG find module")
endif()

quiet_message(STATUS "Looking for FFMPEG - found")
